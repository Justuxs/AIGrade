@page "/contentquizzes/{Id}"
@using LLMEducation.Data.Entity
@using LLMEducation.Service
@inject ContentService contentService
@inject QuizService quizService
@inject NavigationManager nm

@using LLMEducation.Enums
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage ProtectedSessionStore

<h1 class="text-center">Content Tests</h1>
@if (!string.IsNullOrEmpty(errorMsg))
{
    <Alert Color="AlertColor.Warning"> <Icon Name="IconName.ExclamationTriangleFill" class="me-2"></Icon>@errorMsg</Alert>
}

@if (!string.IsNullOrEmpty(sucMsg))
{
    <Alert Color="AlertColor.Success"> <Icon Name="IconName.Safe" class="me-2"></Icon>@sucMsg</Alert>
}

@if (content == null)
{
    <p>Loading content...</p>
}
else
{
    <div class="row bg-white rounded m-1">
        <div class="col">
            <strong>Subject:</strong> @content.Subject
        </div>
        <div class="col">
            <strong>Theme:</strong> @content.Theme
        </div>
        <div class="col">
            <strong>Topic:</strong> @content.Topic
        </div>
        <div class="col">
            <strong>Subtopic:</strong> @content.Subtopic
        </div>
    </div>
    <div class="row justify-content-center m-3">
        <div class="col-auto">
            <button class="btn btn-primary btn-lg rounded-pill" @onclick=" () => Generate()">Generate new test</button>
        </div>
    </div>

}

@if (testQList == null)
{
    <p>Loading tests...</p>
}
else
{
    <table class="table bg-white rounded">
        <thead>
            <tr>
                <th>Question</th>
                <th>Option A</th>
                <th>Option B</th>
                <th>Option C</th>
                <th>Option D</th>
                <th>Correct Answer</th>
                <th>Explanation</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var testQ in testQList)
            {
                <tr>
                    <td>@testQ.QuestionText</td>
                    <td>@testQ.OptionA</td>
                    <td>@testQ.OptionB</td>
                    <td>@testQ.OptionC</td>
                    <td>@testQ.OptionD</td>
                    <td>@testQ.CorrectAnswerLetter</td>
                    <td>@testQ.CorrectAnswerExplanation</td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => DeleteQuestion(testQ)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public string Id { get; set; }

    Content content;
    List<TestQ> testQList;


    string errorMsg = string.Empty;
    string sucMsg = string.Empty;



    protected override async Task OnInitializedAsync()
    {
        var role = await ProtectedSessionStore.GetAsync<int>("role");
        var role_ = role.Success ? role.Value : -1;

        if (role_ != (int)UserRole.Admin)
        {
            nm.NavigateTo("/login");
            return;
        }

        errorMsg = "";
        content = await contentService.GetById(Id);
        if (content == null)
        {
            errorMsg = "Content is not exist!";
            return;
        }
        testQList = await quizService.GetTestQs(Id);
        if (testQList == null || testQList.Count == 0)
        {
            errorMsg = "No tests founded!";
        }
    }

    private async Task DeleteQuestion(TestQ testQ)
    {

    }

    private void Generate()
    {
        nm.NavigateTo($"/generate/{Id}");
    }

}
